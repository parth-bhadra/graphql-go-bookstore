package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strconv"

	"github.com/parth-bhadra/graphql-go-bookstore/graph/model"
)

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, title string, author string, publishedYear int) (*model.Book, error) {
	newBook := &model.Book{
		ID:            strconv.Itoa(len(r.books) + 1),
		Title:         title,
		Author:        author,
		PublishedYear: publishedYear,
	}

	r.books = append(r.books, newBook)
	return newBook, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	return r.books, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	for _, book := range r.books {
		if book.ID == id {
			return book, nil
		}
	}
	return nil, nil
}

// Mutation returns MutationResolver implementation.
// func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
// func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// type mutationResolver struct{ *Resolver }
// type queryResolver struct{ *Resolver }
